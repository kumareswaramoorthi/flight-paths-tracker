// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	errors "github.com/kumareswaramoorthi/flight-paths-tracker/api/errors"
)

// MockFlightTrackerService is a mock of FlightTrackerService interface.
type MockFlightTrackerService struct {
	ctrl     *gomock.Controller
	recorder *MockFlightTrackerServiceMockRecorder
}

// MockFlightTrackerServiceMockRecorder is the mock recorder for MockFlightTrackerService.
type MockFlightTrackerServiceMockRecorder struct {
	mock *MockFlightTrackerService
}

// NewMockFlightTrackerService creates a new mock instance.
func NewMockFlightTrackerService(ctrl *gomock.Controller) *MockFlightTrackerService {
	mock := &MockFlightTrackerService{ctrl: ctrl}
	mock.recorder = &MockFlightTrackerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlightTrackerService) EXPECT() *MockFlightTrackerServiceMockRecorder {
	return m.recorder
}

// FindSourceAndDestination mocks base method.
func (m *MockFlightTrackerService) FindSourceAndDestination(c *gin.Context, tickets [][]string) ([]string, *errors.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSourceAndDestination", c, tickets)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*errors.ErrorResponse)
	return ret0, ret1
}

// FindSourceAndDestination indicates an expected call of FindSourceAndDestination.
func (mr *MockFlightTrackerServiceMockRecorder) FindSourceAndDestination(c, tickets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSourceAndDestination", reflect.TypeOf((*MockFlightTrackerService)(nil).FindSourceAndDestination), c, tickets)
}

// ValidateTickets mocks base method.
func (m *MockFlightTrackerService) ValidateTickets(c *gin.Context, tickets [][]string) *errors.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTickets", c, tickets)
	ret0, _ := ret[0].(*errors.ErrorResponse)
	return ret0
}

// ValidateTickets indicates an expected call of ValidateTickets.
func (mr *MockFlightTrackerServiceMockRecorder) ValidateTickets(c, tickets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTickets", reflect.TypeOf((*MockFlightTrackerService)(nil).ValidateTickets), c, tickets)
}
